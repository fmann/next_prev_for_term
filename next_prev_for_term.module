<?php
/**
 * @file next_prev_for_term.module
 * A little module that adds next and previous navigation to nodes within a taxonomy.
 */

/**
 * Implements hook_help()
 */
function next_prev_for_term_help( $path, $arg ) {
  
  switch ( $path ) {
    case 'admin/help#next_prev_for_term':
      $output = '';
      $output .= '<h3>' . t( 'About' ) . '</h3>';
      $output .= '<p>' . t( 'This module adds next/previous links within a vocabulary to nodes.' ) . '</p>';
      
      return $output;
  }
  
} // function next_prev_for_term_help()


/**
 * Implementation of hook_menu()
 */
function next_prev_for_term_menu() {

  
  // Social Media
  $items[ 'admin/config/content/nextprev' ] = array(
    'title'            => 'Next/previous links by vocabulary',
    'description'      => 'Next/Previous links by vocabulary',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array( 'next_prev_for_term_admin_form' ),
    'access arguments' => array( 'administer next/prev links' ),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
  );
  
  return $items;
  
} // function next_prev_for_term_menu()


/**
 * Implementation of hook_permission()
 */
function next_prev_for_term_permission() {
  
  return array(
    'administer next/prev links' => array(
      'title' => t( 'Administer next/previous links' ),
    ),
  );
  
} // function next_prev_for_term_permissions()


/**
 * The admin page
 */
function next_prev_for_term_admin_form( $form, &$form_state ) {
  
  $form[ 'description' ] = array(
    '#markup' => t( 'Manage the next/previous link behavior.' ),
  );
  
  $vocabulary            = taxonomy_get_vocabularies();
  $checklist_vocab_array = array(); 
  
  foreach ($vocabulary as $item) {
    $key    = $item->vid;
    $value  = $item->name;
    $checklist_vocab_array[$key] = $value;
  }

  $form[ 'next_prev_for_term_applicable_vocabularies' ] = array(
    '#type'             => 'select',
    '#title'            => t('Vocabularies'),
    '#position'         => 'left' ,
    '#options'          => $checklist_vocab_array ,
    '#default_value'    => variable_get('next_prev_for_term_applicable_vocabularies'),
    '#description'      => t('Select which vocabulary to add next/previous links to'),
  );
  
  $form[ 'next_prev_for_term_applicable_display_mode' ] = array(
    '#type'             => 'select',
    '#title'            => t('Apply to display mode'),
    '#position'         => 'left' ,
    '#options'          => array('teaser' => 'teaser', 'full' => 'full') ,
    '#default_value'    => variable_get('next_prev_for_term_applicable_display_mode'),
    '#description'      => t('Select which display mode to add next/previous links'),
  );

  $form[ 'next_prev_for_term_include_arrows' ] = array(
    '#type'             => 'select',
    '#title'            => t('Include arrows'),
    '#position'         => 'left' ,
    '#options'          => array(1 => 'yes', 0 => 'no') ,
    '#default_value'    => variable_get('next_prev_for_term_include_arrows'),
    '#description'      => t('Whether or not to include arrows on the next and previous links'),
  );

  $form[ 'next_prev_for_term_label' ] = array(
    '#type'             => 'select',
    '#title'            => t('Label'),
    '#position'         => 'left' ,
    '#options'          => array('title' => 'Node title', 'next' => 'Next/Previous', 'both' => 'Both') ,
    '#default_value'    => variable_get('next_prev_for_term_label'),
    '#description'      => t('Whether to display the words "Next" and "Previous" or the node title or both.'),
  );


  $form['next_prev_for_term_weight'] = array(
    '#type'          => 'weight', 
    '#title'         => t('Weight'), 
    '#default_value' => variable_get('next_prev_for_term_weight'),
    '#delta'         => 10, 
    '#description'   => t('Where in the render array we should add the next/prev links.'),

  );


  return system_settings_form( $form );
  
} // function next_prev_for_term_admin_form()




/**
 * Implements hook_theme().
 */
function next_prev_for_term_theme($existing, $type, $theme, $path) {
  return array(
    'next-prev-for-term' => array(
      'template'    => 'next-prev-for-term',
      'variables'   => array('next' => NULL, 'prev' => NULL),
    ),
  );
}
  
function next_prev_for_term_node_view($node, $view_mode, $langcode){

    if ($view_mode == variable_get('next_prev_for_term_applicable_display_mode')){
      $terms     = field_get_items('node', $node, 'taxonomy_vocabulary_' . variable_get('next_prev_for_term_applicable_vocabularies'), $langcode);
      if (is_array($terms) && count($terms)){
        $next_nids = next_prev_for_term_select_nodes_from_nid($terms[0]['tid'], $node->nid, 'next');
        $prev_nids = next_prev_for_term_select_nodes_from_nid($terms[0]['tid'], $node->nid, 'prev');

        if (variable_get('next_prev_for_term_label') == 'title'){
          $next_text = node_load($next_nids[0])->title;
          $prev_text = node_load($prev_nids[0])->title;
        } elseif (variable_get('next_prev_for_term_label') == 'both'){
          $next_title = node_load($next_nids[0])->title;
          $prev_title = node_load($prev_nids[0])->title;
          $next_text = t('Next') . ': ' . $next_title;
          $prev_text = t('Previous') . ': ' . $prev_title; 
        } else {
          $next_text = t('Next');
          $prev_text = t('Previous');
        }


        if (variable_get('next_prev_for_term_include_arrows')){
          $next_arrow = ' &rsaquo;';
          $prev_arrow = '&lsaquo; ';
        }
        
        $next_link = $next_nids ? l($next_text . $next_arrow, 'node/' . $next_nids[0], array('html' => TRUE)) : NULL;
        $prev_link = $prev_nids ? l($prev_arrow . $prev_text, 'node/' . $prev_nids[0], array('html' => TRUE)) : NULL;

        $node->content['next_prev_for_term'] = array(
          '#markup' => theme('next-prev-for-term', array('next' => $next_link, 'prev' => $prev_link)), 
          '#weight' => variable_get('next_prev_for_term_weight', 0), 
        );
      }
    }
}


function next_prev_for_term_select_nodes_from_nid($tid, $nid, $direction = 'next', $limit = 1) {
    if (!variable_get('taxonomy_maintain_index_table', TRUE)) {
        return array();
    }

    $query = db_select('taxonomy_index', 't');
    $query->addTag('node_access');
    $query->condition('tid', $tid);
    $query->condition('nid', $nid, $direction == 'next' ? '>' : '<');

    if ($limit !== FALSE) {
        $query->range(0, $limit);
    }

    $query->addField('t', 'nid');
    $query->addField('t', 'tid');
    $query->orderBy('t.nid', $direction == 'next' ? 'ASC' : 'DESC');

    return $query->execute()->fetchCol();
}